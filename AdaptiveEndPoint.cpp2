/*
 * AdaptiveActor.cpp
 *
 *  Created on: Aug 8, 2013
 *      Author: wangli
 */
#include <iostream>
#include <libconfig.h++>
#include <sys/socket.h>
#include <netdb.h>
#include <sstream>
#include <arpa/inet.h>
#include "AdaptiveEndPoint.h"
#include "Debug.h"

AdaptiveEndPoint::AdaptiveEndPoint(const char* name,  std::string ip, std::string port)
:Theron::EndPoint(name, ("tcp://"+ip+":"+port).c_str()){

	#ifdef DEBUG_AdaptiveEndPoint
	std::cout<<"[AdaptiveEndPoint]: The AdaptiveEndPoint is created as "<<"tcp://"+ip+":"+port<<std::endl;
	#endif
	framework=new Theron::Framework(*(EndPoint*)this);
	connectionActor=new AdaptiveEndPoint::ConnectionActor(this,("ConnectionActor://"+ip+":"+port).c_str());

	if(SayHelloToCoordinator(ip,port)==false){
		std::cout<<"[AdaptiveEndPoint]: Error occurs when saying hello to the coordinator!"<<std::endl;
	}

	#ifdef DEBUG_AdaptiveEndPoint
		std::cout<<"[AdaptiveEndPoint]: Get Coordinator EndPoint Port..."<<std::endl;
	#endif
	int coordinator_endpoint_port;
	if((coordinator_endpoint_port=GetCoordinatorEndPointPort())==-1){
		std::cout<<"[AdaptiveEndPoint]: Error occurs when getting the coordinator EndPoint port!"<<std::endl;
	}


	#ifdef DEBUG_AdaptiveEndPoint
		std::cout<<"[AdaptiveEndPoint]: Connect to Coordinator EndPoint..."<<std::endl;
	#endif
	if(ConnectToCoordinateEndPoint(coordinator_endpoint_port)==false){
		std::cout<<"[AdaptiveEndPoint]: Error occurs when connecting to the coordinator EndPoint!"<<std::endl;
	}
	WaitForReadySignalFromCoordinator();
}

AdaptiveEndPoint::~AdaptiveEndPoint() {
	// TODO Auto-generated destructor stub
	framework->~Framework();
	this->~EndPoint();
}

bool AdaptiveEndPoint::SayHelloToCoordinator(std::string ip,std::string port){
	libconfig::Config cfg;
	cfg.readFile("/home/imdb/config/wangli/coor.conf");
	ip_coor=(const char *)cfg.lookup("coordinator.ip");
	std::string coord_port=(const char*)cfg.lookup("coordinator.port");
	int recvbytes;

	struct hostent* host;
	struct sockaddr_in serv_addr;

	if((host=gethostbyname(ip_coor.c_str()))==0)
	{
		perror("gethostbyname errors!\n");
		return false;
	}
	if((socket_coor = socket(AF_INET, SOCK_STREAM,0))==-1)
	{
		perror("socket create errors!\n");
		return false;
	}
	serv_addr.sin_family=AF_INET;
	serv_addr.sin_port=htons(atoi(coord_port.c_str()));
	serv_addr.sin_addr=*((struct in_addr*)host->h_addr);
	bzero(&(serv_addr.sin_zero),8);
	if(connect(socket_coor,(struct sockaddr *)&serv_addr, sizeof(struct sockaddr))==-1)
	{
		printf("connection errors when connecting to %s:%s!\n",inet_ntoa(serv_addr.sin_addr),coord_port.c_str());
		return false;
	}

	int port_send=atoi(port.c_str());
	if(send(socket_coor,&port_send,sizeof(int),0)==-1)
	{
		perror("Error occurs when sending the hello message to the coordinator!\n");
		return false;
	}
	return true;
}
int AdaptiveEndPoint::GetCoordinatorEndPointPort(){
	int recvbytes;
	int port;
	if((recvbytes=recv(socket_coor,&port,sizeof(int),0))==-1){
		perror("recv error!\n");
		return -1;
	}
#ifdef DEBUG_AdaptiveEndPoint
	std::cout<<"[AdaptiveEndPoint]: GetCoordinatorEndPointPort() is successful. The Coordinator Theron EndPoint is "<<ip_coor<<":"<<port<<std::endl;
#endif
	return port;

}
bool AdaptiveEndPoint::ConnectToCoordinateEndPoint(int port){
	std::ostringstream os;
	os<<"tcp://"<<ip_coor<<":"<<port;
	if(!ConnectToRemoteEndPoint(os.str().c_str())){
		std::cout<<"Check whether network is enabled!"<<os.str()<<std::endl;
		return false;
	}
#ifdef DEBUG_AdaptiveEndPoint
	std::cout<<"[AdaptiveEndPoint]: ConnectToCoordinateEndPoint() is successful"<<std::endl;
#endif
	return true;
}
bool AdaptiveEndPoint::ConnectToRemoteEndPoint(std::string location){
	return this->Connect(location.c_str());
}
AdaptiveEndPoint::ConnectionActor::ConnectionActor(AdaptiveEndPoint* AEP, const char* Name)
:Actor(*(AEP->framework),Name),AEP(AEP){
	RegisterHandler(this,&AdaptiveEndPoint::ConnectionActor::ReceiveNodeStatus256);

}

void AdaptiveEndPoint::ConnectionActor::ReceiveNodeStatus256(const Message256 &message, const Theron::Address from){
	NodeConnectionMessage NCM=NodeConnectionMessage::deserialize(message);
	std::ostringstream str;

	str<<"tcp://"+NCM.ip<<":"<<NCM.port;


	if(!AEP->ConnectToRemoteEndPoint(str.str().c_str())){
		std::cout<<"Check whether the Network is enabled!"<<std::endl;
	}
	Send(0,from);
#ifdef DEBUG_AdaptiveEndPoint
	std::cout<<"[AdaptiveEndPoint]: Successfully connected to the EndPoint of new node through "<<str.str()<<std::endl;
#endif
}
bool AdaptiveEndPoint::WaitForReadySignalFromCoordinator(){
	int recvbytes;
	char signal;
	if((recvbytes=recv(socket_coor,&signal,sizeof(char),0))==-1){
		perror("recv error!\n");
		return false;
	}
//	Logging_AdaptiveEndPoint("Join to the EndPoint network successfully!");
	return true;
}
