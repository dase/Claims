/*
 * BlockStreamJoinIterator.cpp
 *
 *  Created on: 2013-8-27
 *      Author: casa
 */

#include "BlockStreamJoinIterator.h"

BlockStreamJoinIterator::BlockStreamJoinIterator(State state)
:state_(state),hash(0),hashtable(0),open_finished_(false),reached_end(0){
	sema_open_.set_value(1);
	barrier_=new Barrier(BARRIER);
}

BlockStreamJoinIterator::BlockStreamJoinIterator()
:hash(0),hashtable(0),open_finished_(false),reached_end(0){
	sema_open_.set_value(1);
	barrier_=new Barrier(BARRIER);
}

BlockStreamJoinIterator::~BlockStreamJoinIterator() {
	
}

BlockStreamJoinIterator::State::State(BlockStreamIteratorBase *child_left,
				       BlockStreamIteratorBase *child_right,
				       Schema *input_schema_left,
				       Schema *input_schema_right,
				       Schema *output_schema,
				       std::vector<unsigned> joinIndex_left,
				       std::vector<unsigned> joinIndex_right,
				       std::vector<unsigned> payload_left,
				       std::vector<unsigned> payload_right,
				       unsigned ht_nbuckets,
				       unsigned ht_bucketsize,
				       unsigned block_size)
		:child_left(child_left),
		 child_right(child_right),
		 input_schema_left(input_schema_left),
		 input_schema_right(input_schema_right),
		 output_schema(output_schema),
		 joinIndex_left(joinIndex_left),
		 joinIndex_right(joinIndex_right),
		 payload_left(payload_left),
		 payload_right(payload_right),
		 ht_nbuckets(ht_nbuckets),
		 ht_bucketsize(ht_bucketsize),
		 block_size_(block_size){

		}

bool BlockStreamJoinIterator::open(const PartitionOffset& partition_offset){
	AtomicPushFreeHtBlockStream(BlockStreamBase::createBlock(state_.input_schema_left,state_.block_size_));
	AtomicPushFreeBlockStream(BlockStreamBase::createBlock(state_.input_schema_right,state_.block_size_));
	cout<<"AtomicPushFreeBlockStream\n\n"<<endl;
	cout<<"join open begin"<<endl;
	cout<<")))))))00000000000000"<<endl;
	cout<<")))))))00000000000000"<<endl;
	if(sema_open_.try_wait()){
		cout<<")))))))00000000000000"<<endl;
		unsigned output_index=0;
		for(unsigned i=0;i<state_.joinIndex_left.size();i++){
			joinIndex_left_to_output[i]=output_index++;
		}
		for(unsigned i=0;i<state_.payload_left.size();i++){
			payload_left_to_output[i]=output_index++;
		}
		for(unsigned i=0;i<state_.payload_right.size();i++){
			payload_right_to_output[i]=output_index++;
		}
		/* Currently, the block is 4096, and the table in build phase is left one*/
		//始终是在用这块空间向next取数据
//		bsb=new BlockStreamFix(4096,state_.input_schema_left->getTupleMaxSize());
	//	bsb_right=new BlockStreamFix(4096,state_.input_schema_right->getTupleMaxSize());

		//如果是多线程的话，就应该是只有一个open的线程建立hash表，也只有一个线程调用下面的open函数
		hash=PartitionFunctionFactory::createModuloFunction(state_.ht_nbuckets);
		hashtable=new BasicHashTable(state_.ht_nbuckets,state_.ht_bucketsize,state_.input_schema_left->getTupleMaxSize());

		cout<<"in the open master "<<endl;
		open_finished_=true;
		cout<<")))))))00000000000000"<<endl;
	}else{
		while (!open_finished_) {
			usleep(1);
		}
	}
	state_.child_left->open(partition_offset);
	cout<<"join open hashtable finished"<<endl;
	state_.child_right->open(partition_offset);

	//hashtable createIterator的好处就是创建的都是可读的对象，不需要加锁
	cout<<"++++++++++++++++++++++++++++++++++++++++++++ ++"<<endl;
	lock_.acquire();
	BasicHashTable::Iterator tmp_it=hashtable->CreateIterator();
	lock_.release();
	cout<<"++++++++++++++++++++++++++++++++++++++++++++ +++++++++++++++++"<<endl;
	void *cur;
	void *tuple_in_hashtable;
	unsigned bn;

	void *key_in_input;
	void *key_in_hashtable;
	void *value_in_input;
	void *value_in_hashtable;

	BlockStreamBase *bsb=AtomicPopFreeHtBlockStream();
	while(state_.child_left->next(bsb)){
	cout<<"======================================================"<<endl;
		BlockStreamBase::BlockStreamTraverseIterator *bsti=bsb->createIterator();
		bsti->reset();
		while(cur=bsti->nextTuple()){
			/* Currently, the join index is [0]-th column, so the hash table is based on the hash value of [0]-th column*/
			bn=hash->get_partition_value(*(int *)(state_.input_schema_left->getColumnAddess(state_.joinIndex_left[0],cur)));
			hashtable->placeIterator(tmp_it,bn);

			lock_.acquire();

//			cout<<"llllllllllllllllllllllllllllllllllllllllllllllllllll"<<endl;
			tuple_in_hashtable=hashtable->allocate(bn);


			/* copy join index columns*/
			for(unsigned i=0;i<state_.joinIndex_left.size();i++){
				key_in_input=state_.input_schema_left->getColumnAddess(state_.joinIndex_left[i],cur);
				key_in_hashtable=state_.output_schema->getColumnAddess(joinIndex_left_to_output[i],tuple_in_hashtable);
				state_.input_schema_left->getcolumn(state_.joinIndex_left[i]).operate->assignment(key_in_input,key_in_hashtable);
			}

			/* copy left payload columns*/
			for(unsigned i=0;i<state_.payload_left.size();i++){
				value_in_input=state_.input_schema_left->getColumnAddess(state_.payload_left[i],cur);
				value_in_hashtable=state_.output_schema->getColumnAddess(payload_left_to_output[i],tuple_in_hashtable);
				state_.input_schema_left->getcolumn(state_.payload_left[i]).operate->assignment(value_in_input,value_in_hashtable);
			}
//			cout<<"hash block: "<<bn<<", tuple: "<<*reinterpret_cast<int *>(tuple_in_hashtable)<<"+"<<*(reinterpret_cast<int *>(tuple_in_hashtable)+1)<<endl;

			lock_.release();
		}
		bsb->setEmpty();
	}
	cout<<"join open end"<<endl;

	//TODO: ugly here!! 应该有个barrier这里，为了probe过程之前，hashtable应该建完
//	sleep(2);//important
	iii=0;
	barrier_->Arrive();
		return true;

	//prepare for next traverse
//	it=hashtable->CreateIterator();
//	hashtable->placeIterator(it,0);
}

bool BlockStreamJoinIterator::next(BlockStreamBase *block){
	unsigned bn;
	void *tuple;
	void *cur;
	void *cur_in_ht_itr;

	void *key_in_input;
	void *key_in_hashtable;
	void *column_in_joinedTuple;

	void *joinedTuple=memalign(cacheline_size,state_.output_schema->getTupleMaxSize());

//	block->setEmpty();//1011
	bool key_exit;
	remaining_block rb;
	if(atomicPopRemainingBlock(rb)){
		while(cur=rb.bsti_->currentTuple()){
//			if(dirty==0){
//				//如果是dirty=0就代表是第一次进入这个tuple来比较，如果这个比完了就又变为dirty=0的
//				bn=hash->hash(*(int*)(state_.input_schema_right->getColumnAddess(state_.joinIndex_right[0],cur)));
//				hashtable->placeIterator(it,bn);
//				dirty=1;
//			}
			while(cur_in_ht_itr=rb.it_.readCurrent()){
				for(unsigned i=0;i<state_.joinIndex_right.size();i++){
					key_in_input=state_.input_schema_right->getColumnAddess(state_.joinIndex_right[i],cur);
					key_in_hashtable=state_.output_schema->getColumnAddess(joinIndex_left_to_output[i],cur_in_ht_itr);
					if(state_.input_schema_left->getcolumn(state_.joinIndex_right[i]).operate->equal(key_in_input,key_in_hashtable)){
						key_exit=true;
					}
					else{
						key_exit=false;
					}
				}

				if(key_exit){
					if((tuple=block->allocateTuple(state_.output_schema->getTupleMaxSize()))>0){
						for(unsigned i=0;i<state_.joinIndex_left.size();i++){
							key_in_hashtable=state_.input_schema_left->getColumnAddess(state_.joinIndex_left[i],cur_in_ht_itr);
							column_in_joinedTuple=state_.output_schema->getColumnAddess(joinIndex_left_to_output[i],joinedTuple);
							state_.input_schema_left->getcolumn(state_.joinIndex_left[i]).operate->assignment(key_in_hashtable,column_in_joinedTuple);
						}

						for(unsigned i=0;i<state_.payload_left.size();i++){
							key_in_hashtable=state_.input_schema_left->getColumnAddess(state_.payload_left[i],cur_in_ht_itr);
							column_in_joinedTuple=state_.output_schema->getColumnAddess(payload_left_to_output[i],joinedTuple);
							state_.input_schema_left->getcolumn(state_.payload_left[i]).operate->assignment(key_in_hashtable,column_in_joinedTuple);
						}

						for(unsigned i=0;i<state_.payload_right.size();i++){
							key_in_input=state_.input_schema_right->getColumnAddess(state_.payload_right[i],cur);
							column_in_joinedTuple=state_.output_schema->getColumnAddess(payload_right_to_output[i],joinedTuple);
							state_.input_schema_right->getcolumn(state_.payload_right[i]).operate->assignment(key_in_input,column_in_joinedTuple);
						}
						memcpy(tuple,joinedTuple,state_.output_schema->getTupleMaxSize());
						lock_.acquire();
//						cout<<"match: "<<*reinterpret_cast<int *>(tuple)<<"--"<<*(reinterpret_cast<int *>(tuple)+1)<<"--"<<*(reinterpret_cast<int *>(tuple)+2)<<endl;
						iii++;
						if(iii>399000000)
						cout<<"match: "<<*reinterpret_cast<int *>(tuple)<<"--"<<*(reinterpret_cast<int *>(tuple)+1)<<"--"<<*(reinterpret_cast<int *>(tuple)+2)<<"++++++++++"<<iii<<endl;
						lock_.release();
					}
					else{
//						cout<<"I will send the block out!!!!!"<<endl;
						atomicPushRemainingBlock(rb);
							return true;
					}
				}
				rb.it_.increase_cur_();
			}
			//modify some thing for nextTuple() and currentTuple()
			//TODO: modify something ugly
			rb.bsti_->increase_cur_();
			if((cur=rb.bsti_->currentTuple())){
				bn=hash->get_partition_value(*(int*)(state_.input_schema_right->getColumnAddess(state_.joinIndex_right[0],cur)));
				hashtable->placeIterator(rb.it_,bn);
			}
		}
		AtomicPushFreeBlockStream(rb.bsb_right_);
		cout<<"AtomicPushFreeBlockStream\n\n"<<endl;
//		return true;//1011
	}
	//TODO: ugly code!!
//	sleep(3);
//	cout<<"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO"<<endl;
	rb.bsb_right_=AtomicPopFreeBlockStream();//1 1 1
//	cout<<"AtomicPopFreeBlockStream\n\n"<<endl;
	rb.bsb_right_->setEmpty();
	//changed by AtomicPushFreeBlockStream
	if(state_.child_right->next(rb.bsb_right_)==false){
		cout<<"............................................................................................"<<endl;
		if(block->Empty()==true){
			AtomicPushFreeBlockStream(rb.bsb_right_);
			return false;
		}
		else{
			AtomicPushFreeBlockStream(rb.bsb_right_);
			return true;
		}
	}

	cout<<"{{{{{{{{{reach the next of join}}}}}}}}}"<<endl;
	rb.bsti_=rb.bsb_right_->createIterator();
	cout<<"{{{{{{{{{reach the next of join}}}}}}}}}"<<endl;
	if((cur=rb.bsti_->currentTuple())){
		bn=hash->get_partition_value(*(int*)(state_.input_schema_right->getColumnAddess(state_.joinIndex_right[0],cur)));
		hashtable->placeIterator(rb.it_,bn);
	}
	cout<<"{{{{{{{{{reach the next of join}}}}}}}}}"<<endl;
	atomicPushRemainingBlock(rb);
	return next(block);
}

bool BlockStreamJoinIterator::close(){
//	free(bsb);
//	free(bsb_right);
	/*
	 * free the block_right of the every block
	 * */
//	free(joinedTuple);
//	for(unsigned i=0;i<free_block_stream_list_.size();i++)
//		free(free_block_stream_list_[i]);
//	for(unsigned i=0;i<ht_free_block_stream_list_.size();i++)
//		free(ht_free_block_stream_list_.pop_front());
	hash->~PartitionFunction();
	hashtable->~BasicHashTable();
	return true;
}

bool BlockStreamJoinIterator::atomicPopRemainingBlock(remaining_block & rb){
	lock_.acquire();
	if(remaining_block_list_.size()>0){
		rb=remaining_block_list_.front();
		remaining_block_list_.pop_front();
		lock_.release();
		return true;
	}
	else{
		lock_.release();
		return false;
	}
}

void BlockStreamJoinIterator::atomicPushRemainingBlock(remaining_block rb){
	lock_.acquire();
	remaining_block_list_.push_back(rb);
	lock_.release();
}

BlockStreamBase* BlockStreamJoinIterator::AtomicPopFreeBlockStream(){
	assert(!free_block_stream_list_.empty());
	lock_.acquire();
	BlockStreamBase *block=free_block_stream_list_.front();
	free_block_stream_list_.pop_front();
	lock_.release();
	return block;
}

void BlockStreamJoinIterator::AtomicPushFreeBlockStream(BlockStreamBase* block){
	lock_.acquire();
	free_block_stream_list_.push_back(block);
	lock_.release();
}

BlockStreamBase* BlockStreamJoinIterator::AtomicPopFreeHtBlockStream(){
	assert(!ht_free_block_stream_list_.empty());
	lock_.acquire();
	BlockStreamBase *block=ht_free_block_stream_list_.front();
	ht_free_block_stream_list_.pop_front();
	lock_.release();
	return block;
}

void BlockStreamJoinIterator::AtomicPushFreeHtBlockStream(BlockStreamBase* block){
	lock_.acquire();
	ht_free_block_stream_list_.push_back(block);
	lock_.release();
}










